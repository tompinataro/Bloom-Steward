pluginManagement {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()
  def (_, reactNativeMinor, reactNativePatch) = version.split("-")[0].tokenize('.').collect { it.toInteger() }

  includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
  if(reactNativeMinor == 74 && reactNativePatch <= 3){
    includeBuild("react-settings-plugin")
  }
  def localExpoPluginDir = file("expo-module-gradle-plugin")
  if (localExpoPluginDir.exists()) {
    includeBuild(localExpoPluginDir)
  } else {
    def expoModuleGradlePluginPath = providers.exec {
      commandLine("node", "-e", """
        const path = require('path');
        const fs = require('fs');
        const pkgDir = path.dirname(require.resolve('expo-modules-core/package.json'));
        const candidates = [
          path.join(pkgDir, 'expo-module-gradle-plugin'),
          path.join(pkgDir, '..', 'expo-module-gradle-plugin'),
          path.join(pkgDir, '..', '..', 'expo-module-gradle-plugin'),
        ];
        let found = '';
        for (const candidate of candidates) {
          if (fs.existsSync(candidate)) {
            found = candidate;
            break;
          }
        }
        process.stdout.write(found);
      """.stripIndent())
    }.standardOutput.asText.get().trim()
    if (expoModuleGradlePluginPath) {
      includeBuild(new File(expoModuleGradlePluginPath))
    } else {
      println("Warning: expo-module-gradle-plugin directory not found. Expo modules may fail to build.")
    }
  }
}

plugins { id("com.facebook.react.settings") }

def getRNMinorVersion() {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return minor
}

if (getRNMinorVersion() >= 75) {
  extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_UNSTABLE_CORE_AUTOLINKING') == '1') {
      println('\u001B[32mUsing expo-modules-autolinking as core autolinking source\u001B[0m')
      def command = [
        'node',
        '--no-warnings',
        '--eval',
        'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
        'react-native-config',
        '--json',
        '--platform',
        'android'
      ].toList()
      ex.autolinkLibrariesFromCommand(command)
    } else {
      ex.autolinkLibrariesFromCommand()
    }
  }
}

rootProject.name = 'Bloom Steward'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

if (getRNMinorVersion() < 75) {
  apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
  applyNativeModulesSettingsGradle(settings)
}

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())
